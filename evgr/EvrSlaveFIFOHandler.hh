#ifndef Pds_EvrSlaveFIFOHandler_hh
#define Pds_EvrSlaveFIFOHandler_hh

#include "pds/evgr/EvrFIFOHandler.hh"
#include "pds/evgr/EvrSync.hh"
#include "pds/service/GenericPool.hh"
#include "pds/service/Semaphore.hh"
#include "pdsdata/xtc/TimeStamp.hh"
/*
 * Signal handler, for processing the incoming event codes, and providing interfaces for
 *   retrieving L1 data from the L1Xmitter object
 * The Slave EVR process is indicated by L1Xmitter::enable.  The master is responsible
 * for sending the EvrDatagram to the other segment levels, generating the sw triggers, 
 * adding the FIFO data to the L1Accept datagram, and counting events for calibration cycles.
 * All EVR processes configure the
 * EVRs to generate hardware triggers.  The slave EVR processes only need verify that
 * their FIFO data matches the timestamp of the L1Accept generated by the master.
 */

namespace Pds {

  class Appliance;
  class Evr;
  class FIFOEvent;
  class InDatagram;
  class Transition;
  class Task;
  class EvrFifoServer;

  class EvrSlaveFIFOHandler : public EvrFIFOHandler {
  public:
    enum { guNumTypeEventCode = 256 };
    enum { TERMINATOR         = 1 };
  public:
    EvrSlaveFIFOHandler(Evr&, Appliance&, EvrFifoServer&,
                        unsigned, Task*, Task*);
    virtual ~EvrSlaveFIFOHandler();
  public:
    virtual void        fifo_event  (const FIFOEvent&);  // formerly 'xmit'
    virtual InDatagram* l1accept    (InDatagram*);
    virtual Transition* enable      (Transition*);
    virtual Transition* disable     (Transition*);
    virtual void        set_config  (const EvrConfigType*);
    virtual Transition* config      (Transition*); // config action
    virtual Transition* endcalib    (Transition*);
    virtual void        get_sync    ();
    virtual void        release_sync();

  private:
    bool                  bEnabled;      // partition in Enabled state
  private:
    struct EventCodeState
    {
      bool bReadout;
      bool bCommand;
      int  iDefReportDelay;
      int  iDefReportWidth;  
      int  iReportWidth;
      int  iReportDelayQ; // First-order  delay for Control-Transient events
      int  iReportDelay;  // Second-order delay for Control-Transient events; First-order delay for Control-Latch events
    };
  private:
    Evr &                 _er;
    Appliance&            _app;
    EvrFifoServer&        _srv;
    unsigned              _evtCounter;
    bool                  _bReadout;
    const EvrConfigType*  _pEvrConfig;
    EventCodeState        _lEventCodeState[guNumTypeEventCode];
    unsigned              _lastFiducial;
    enum { QSize=32 };
    unsigned              _rdptr;
    unsigned              _wrptr;
    TimeStamp             _ts[QSize];

    EvrSyncSlave          _sync;
    Transition*           _tr;

    bool                  bShowFirst;

    GenericPool           _occPool;
    bool                  _outOfOrder;

  private:
    void startL1Accept(const FIFOEvent& fe, bool bEvrDataIncomplete);

    void clear();
  };
};

#endif
