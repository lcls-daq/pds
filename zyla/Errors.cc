#include "Errors.hh"

#include "andor3/include/atutility.h"

typedef struct errorTranslate {
  unsigned id;
  const char *name;
} errorTranslate;

#define ZYLA_ERROR_COUNT 46
#define ZYLA_ERROR(x)  x, #x

const char *Pds::Zyla::ErrorCodes::name(unsigned int id)
{
  const char *rv = "unknown error";

  static errorTranslate errors[ZYLA_ERROR_COUNT] = {
    {ZYLA_ERROR(AT_SUCCESS)},
    {ZYLA_ERROR(AT_ERR_NOTINITIALISED)},
    {ZYLA_ERROR(AT_ERR_NOTIMPLEMENTED)},
    {ZYLA_ERROR(AT_ERR_READONLY)},
    {ZYLA_ERROR(AT_ERR_NOTREADABLE)},
    {ZYLA_ERROR(AT_ERR_NOTWRITABLE)},
    {ZYLA_ERROR(AT_ERR_OUTOFRANGE)},
    {ZYLA_ERROR(AT_ERR_INDEXNOTAVAILABLE)},
    {ZYLA_ERROR(AT_ERR_INDEXNOTIMPLEMENTED)},
    {ZYLA_ERROR(AT_ERR_EXCEEDEDMAXSTRINGLENGTH)},
    {ZYLA_ERROR(AT_ERR_CONNECTION)},
    {ZYLA_ERROR(AT_ERR_NODATA)},
    {ZYLA_ERROR(AT_ERR_INVALIDHANDLE)},
    {ZYLA_ERROR(AT_ERR_TIMEDOUT)},
    {ZYLA_ERROR(AT_ERR_BUFFERFULL)},
    {ZYLA_ERROR(AT_ERR_INVALIDSIZE)},
    {ZYLA_ERROR(AT_ERR_INVALIDALIGNMENT)},
    {ZYLA_ERROR(AT_ERR_COMM)},
    {ZYLA_ERROR(AT_ERR_STRINGNOTAVAILABLE)},
    {ZYLA_ERROR(AT_ERR_STRINGNOTIMPLEMENTED)},
    {ZYLA_ERROR(AT_ERR_NULL_FEATURE)},
    {ZYLA_ERROR(AT_ERR_NULL_HANDLE)},
    {ZYLA_ERROR(AT_ERR_NULL_IMPLEMENTED_VAR)},
    {ZYLA_ERROR(AT_ERR_NULL_READABLE_VAR)},
    {ZYLA_ERROR(AT_ERR_NULL_READONLY_VAR)},
    {ZYLA_ERROR(AT_ERR_NULL_WRITABLE_VAR)},
    {ZYLA_ERROR(AT_ERR_NULL_MINVALUE)},
    {ZYLA_ERROR(AT_ERR_NULL_MAXVALUE)},
    {ZYLA_ERROR(AT_ERR_NULL_VALUE)},
    {ZYLA_ERROR(AT_ERR_NULL_STRING)},
    {ZYLA_ERROR(AT_ERR_NULL_COUNT_VAR)},
    {ZYLA_ERROR(AT_ERR_NULL_ISAVAILABLE_VAR)},
    {ZYLA_ERROR(AT_ERR_NULL_MAXSTRINGLENGTH)},
    {ZYLA_ERROR(AT_ERR_NULL_EVCALLBACK)},
    {ZYLA_ERROR(AT_ERR_NULL_QUEUE_PTR)},
    {ZYLA_ERROR(AT_ERR_NULL_WAIT_PTR)},
    {ZYLA_ERROR(AT_ERR_NULL_PTRSIZE)},
    {ZYLA_ERROR(AT_ERR_NOMEMORY)},
    {ZYLA_ERROR(AT_ERR_DEVICEINUSE)},
    {ZYLA_ERROR(AT_ERR_DEVICENOTFOUND)},
    {ZYLA_ERROR(AT_ERR_HARDWARE_OVERFLOW)},
    {ZYLA_ERROR(AT_ERR_INVALIDOUTPUTPIXELENCODING)},
    {ZYLA_ERROR(AT_ERR_INVALIDINPUTPIXELENCODING)},
    {ZYLA_ERROR(AT_ERR_INVALIDMETADATAINFO)},
    {ZYLA_ERROR(AT_ERR_CORRUPTEDMETADATA)},
    {ZYLA_ERROR(AT_ERR_METADATANOTFOUND)}
  };

  for (int ii=0; ii < ZYLA_ERROR_COUNT; ii++) {
    if (errors[ii].id == id) {
      rv = errors[ii].name;
      break;
    }
  }
  return (rv);
}
