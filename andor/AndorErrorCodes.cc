#include "AndorErrorCodes.hh"
#include "andor/include/atmcdLXd.h"

typedef struct errorTranslate {
  unsigned id;
  const char *name;
} errorTranslate;

#define ANDOR_ERROR_COUNT 129
#define ANDOR_ERROR(x)  x, #x

const char *AndorErrorCodes::name(unsigned int id)
{
  const char *rv = "unknown error";

  static errorTranslate errors[ANDOR_ERROR_COUNT] = {
    {ANDOR_ERROR(DRV_SUCCESS)},
    {ANDOR_ERROR(DRV_VXDNOTINSTALLED)},
    {ANDOR_ERROR(DRV_ERROR_SCAN)},
    {ANDOR_ERROR(DRV_ERROR_CHECK_SUM)},
    {ANDOR_ERROR(DRV_ERROR_FILELOAD)},
    {ANDOR_ERROR(DRV_UNKNOWN_FUNCTION)},
    {ANDOR_ERROR(DRV_ERROR_VXD_INIT)},
    {ANDOR_ERROR(DRV_ERROR_ADDRESS)},
    {ANDOR_ERROR(DRV_ERROR_PAGELOCK)},
    {ANDOR_ERROR(DRV_ERROR_PAGEUNLOCK)},
    {ANDOR_ERROR(DRV_ERROR_BOARDTEST)},
    {ANDOR_ERROR(DRV_ERROR_ACK)},
    {ANDOR_ERROR(DRV_ERROR_UP_FIFO)},
    {ANDOR_ERROR(DRV_ERROR_PATTERN)},
    {ANDOR_ERROR(DRV_ACQUISITION_ERRORS)},
    {ANDOR_ERROR(DRV_ACQ_BUFFER)},
    {ANDOR_ERROR(DRV_ACQ_DOWNFIFO_FULL)},
    {ANDOR_ERROR(DRV_PROC_UNKONWN_INSTRUCTION)},
    {ANDOR_ERROR(DRV_ILLEGAL_OP_CODE)},
    {ANDOR_ERROR(DRV_KINETIC_TIME_NOT_MET)},
    {ANDOR_ERROR(DRV_ACCUM_TIME_NOT_MET)},
    {ANDOR_ERROR(DRV_NO_NEW_DATA)},
    {ANDOR_ERROR(KERN_MEM_ERROR)},
    {ANDOR_ERROR(DRV_SPOOLERROR)},
    {ANDOR_ERROR(DRV_SPOOLSETUPERROR)},
    {ANDOR_ERROR(DRV_FILESIZELIMITERROR)},
    {ANDOR_ERROR(DRV_ERROR_FILESAVE)},
    {ANDOR_ERROR(DRV_TEMPERATURE_CODES)},
    {ANDOR_ERROR(DRV_TEMPERATURE_OFF)},
    {ANDOR_ERROR(DRV_TEMPERATURE_NOT_STABILIZED)},
    {ANDOR_ERROR(DRV_TEMPERATURE_STABILIZED)},
    {ANDOR_ERROR(DRV_TEMPERATURE_NOT_REACHED)},
    {ANDOR_ERROR(DRV_TEMPERATURE_OUT_RANGE)},
    {ANDOR_ERROR(DRV_TEMPERATURE_NOT_SUPPORTED)},
    {ANDOR_ERROR(DRV_TEMPERATURE_DRIFT)},
    {ANDOR_ERROR(DRV_TEMP_CODES)},
    {ANDOR_ERROR(DRV_TEMP_OFF)},
    {ANDOR_ERROR(DRV_TEMP_NOT_STABILIZED)},
    {ANDOR_ERROR(DRV_TEMP_STABILIZED)},
    {ANDOR_ERROR(DRV_TEMP_NOT_REACHED)},
    {ANDOR_ERROR(DRV_TEMP_OUT_RANGE)},
    {ANDOR_ERROR(DRV_TEMP_NOT_SUPPORTED)},
    {ANDOR_ERROR(DRV_TEMP_DRIFT)},
    {ANDOR_ERROR(DRV_GENERAL_ERRORS)},
    {ANDOR_ERROR(DRV_INVALID_AUX)},
    {ANDOR_ERROR(DRV_COF_NOTLOADED)},
    {ANDOR_ERROR(DRV_FPGAPROG)},
    {ANDOR_ERROR(DRV_FLEXERROR)},
    {ANDOR_ERROR(DRV_GPIBERROR)},
    {ANDOR_ERROR(DRV_EEPROMVERSIONERROR)},
    {ANDOR_ERROR(DRV_DATATYPE)},
    {ANDOR_ERROR(DRV_DRIVER_ERRORS)},
    {ANDOR_ERROR(DRV_P1INVALID)},
    {ANDOR_ERROR(DRV_P2INVALID)},
    {ANDOR_ERROR(DRV_P3INVALID)},
    {ANDOR_ERROR(DRV_P4INVALID)},
    {ANDOR_ERROR(DRV_INIERROR)},
    {ANDOR_ERROR(DRV_COFERROR)},
    {ANDOR_ERROR(DRV_ACQUIRING)},
    {ANDOR_ERROR(DRV_IDLE)},
    {ANDOR_ERROR(DRV_TEMPCYCLE)},
    {ANDOR_ERROR(DRV_NOT_INITIALIZED)},
    {ANDOR_ERROR(DRV_P5INVALID)},
    {ANDOR_ERROR(DRV_P6INVALID)},
    {ANDOR_ERROR(DRV_INVALID_MODE)},
    {ANDOR_ERROR(DRV_INVALID_FILTER)},
    {ANDOR_ERROR(DRV_I2CERRORS)},
    {ANDOR_ERROR(DRV_I2CDEVNOTFOUND)},
    {ANDOR_ERROR(DRV_I2CTIMEOUT)},
    {ANDOR_ERROR(DRV_P7INVALID)},
    {ANDOR_ERROR(DRV_P8INVALID)},
    {ANDOR_ERROR(DRV_P9INVALID)},
    {ANDOR_ERROR(DRV_P10INVALID)},
    {ANDOR_ERROR(DRV_P11INVALID)},
    {ANDOR_ERROR(DRV_USBERROR)},
    {ANDOR_ERROR(DRV_IOCERROR)},
    {ANDOR_ERROR(DRV_VRMVERSIONERROR)},
    {ANDOR_ERROR(DRV_GATESTEPERROR)},
    {ANDOR_ERROR(DRV_USB_INTERRUPT_ENDPOINT_ERROR)},
    {ANDOR_ERROR(DRV_RANDOM_TRACK_ERROR)},
    {ANDOR_ERROR(DRV_INVALID_TRIGGER_MODE)},
    {ANDOR_ERROR(DRV_LOAD_FIRMWARE_ERROR)},
    {ANDOR_ERROR(DRV_DIVIDE_BY_ZERO_ERROR)},
    {ANDOR_ERROR(DRV_INVALID_RINGEXPOSURES)},
    {ANDOR_ERROR(DRV_BINNING_ERROR)},
    {ANDOR_ERROR(DRV_INVALID_AMPLIFIER)},
    {ANDOR_ERROR(DRV_INVALID_COUNTCONVERT_MODE)},
    {ANDOR_ERROR(DRV_ERROR_NOCAMERA)},
    {ANDOR_ERROR(DRV_NOT_SUPPORTED)},
    {ANDOR_ERROR(DRV_NOT_AVAILABLE)},
    {ANDOR_ERROR(DRV_ERROR_MAP)},
    {ANDOR_ERROR(DRV_ERROR_UNMAP)},
    {ANDOR_ERROR(DRV_ERROR_MDL)},
    {ANDOR_ERROR(DRV_ERROR_UNMDL)},
    {ANDOR_ERROR(DRV_ERROR_BUFFSIZE)},
    {ANDOR_ERROR(DRV_ERROR_NOHANDLE)},
    {ANDOR_ERROR(DRV_GATING_NOT_AVAILABLE)},
    {ANDOR_ERROR(DRV_FPGA_VOLTAGE_ERROR)},
    {ANDOR_ERROR(DRV_OW_CMD_FAIL)},
    {ANDOR_ERROR(DRV_OWMEMORY_BAD_ADDR)},
    {ANDOR_ERROR(DRV_OWCMD_NOT_AVAILABLE)},
    {ANDOR_ERROR(DRV_OW_NO_SLAVES)},
    {ANDOR_ERROR(DRV_OW_NOT_INITIALIZED)},
    {ANDOR_ERROR(DRV_OW_ERROR_SLAVE_NUM)},
    {ANDOR_ERROR(DRV_MSTIMINGS_ERROR)},
    {ANDOR_ERROR(DRV_OA_NULL_ERROR)},
    {ANDOR_ERROR(DRV_OA_PARSE_DTD_ERROR)},
    {ANDOR_ERROR(DRV_OA_DTD_VALIDATE_ERROR)},
    {ANDOR_ERROR(DRV_OA_FILE_ACCESS_ERROR)},
    {ANDOR_ERROR(DRV_OA_FILE_DOES_NOT_EXIST)},
    {ANDOR_ERROR(DRV_OA_XML_INVALID_OR_NOT_FOUND_ERROR)},
    {ANDOR_ERROR(DRV_OA_PRESET_FILE_NOT_LOADED)},
    {ANDOR_ERROR(DRV_OA_USER_FILE_NOT_LOADED)},
    {ANDOR_ERROR(DRV_OA_PRESET_AND_USER_FILE_NOT_LOADED)},
    {ANDOR_ERROR(DRV_OA_INVALID_FILE)},
    {ANDOR_ERROR(DRV_OA_FILE_HAS_BEEN_MODIFIED)},
    {ANDOR_ERROR(DRV_OA_BUFFER_FULL)},
    {ANDOR_ERROR(DRV_OA_INVALID_STRING_LENGTH)},
    {ANDOR_ERROR(DRV_OA_INVALID_CHARS_IN_NAME)},
    {ANDOR_ERROR(DRV_OA_INVALID_NAMING)},
    {ANDOR_ERROR(DRV_OA_GET_CAMERA_ERROR)},
    {ANDOR_ERROR(DRV_OA_MODE_ALREADY_EXISTS)},
    {ANDOR_ERROR(DRV_OA_STRINGS_NOT_EQUAL)},
    {ANDOR_ERROR(DRV_OA_NO_USER_DATA)},
    {ANDOR_ERROR(DRV_OA_VALUE_NOT_SUPPORTED)},
    {ANDOR_ERROR(DRV_OA_MODE_DOES_NOT_EXIST)},
    {ANDOR_ERROR(DRV_OA_CAMERA_NOT_SUPPORTED)},
    {ANDOR_ERROR(DRV_OA_FAILED_TO_GET_MODE)},
    {ANDOR_ERROR(DRV_PROCESSING_FAILED)}
  };

  for (int ii=0; ii < ANDOR_ERROR_COUNT; ii++) {
    if (errors[ii].id == id) {
      rv = errors[ii].name;
      break;
    }
  }
  return (rv);
}
